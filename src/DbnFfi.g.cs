// <auto-generated>
// This code is generated by csbindgen.
// DON'T CHANGE THIS DIRECTLY.
// </auto-generated>
#pragma warning disable CS8500
#pragma warning disable CS8981
using System;
using System.Runtime.InteropServices;


namespace Dbn.Net
{
    internal static unsafe partial class DbnFfi
    {
        const string __DllName = "dbn_ffi";



        /// <summary>
        ///  Opens a .dbn file. Returns null on error.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "dbn_decoder_open", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern DecoderOpaque* dbn_decoder_open(byte* path);

        /// <summary>
        ///  Reads next record. Returns false on EOF or error.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "dbn_decoder_next", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool dbn_decoder_next(DecoderOpaque* handle, byte** out_ptr, nuint* out_len, byte* out_rtype);

        /// <summary>
        ///  Closes and frees decoder and its mmap'd buffer.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "dbn_decoder_free", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void dbn_decoder_free(DecoderOpaque* handle);

        /// <summary>
        ///  Returns a newly allocated flat [`MetadataC`] for `decoder`.
        ///  Caller must free with `dbn_metadata_free`.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "dbn_decoder_metadata", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern MetadataC* dbn_decoder_metadata(DecoderOpaque* handle);

        /// <summary>
        ///  Frees a handle returned by `dbn_decoder_metadata`.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "dbn_metadata_free", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void dbn_metadata_free(MetadataC* ptr);

        /// <summary>
        ///  Copies the last error string to the caller. Ownership of the C-string transfers to the caller.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "dbn_last_error", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool dbn_last_error(byte** @out);

        /// <summary>
        ///  Frees a Câ€‘string returned by `dbn_last_error`.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "dbn_string_free", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void dbn_string_free(byte* ptr);


    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct MetadataC
    {
        public byte version;
        public byte schema;
        public byte stype_in;
        public byte stype_out;
        public byte ts_out;
        public nuint symbol_cstr_len;
        public ulong start;
        public ulong end;
        public ulong limit;
        public byte* dataset;
        public nuint dataset_len;
        public byte** symbols;
        public nuint symbols_len;
        public byte** partial;
        public nuint partial_len;
        public byte** not_found;
        public nuint not_found_len;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct DecoderOpaque
    {
        public fixed byte _private[1];
    }



}
